using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.IO;
using Org.BouncyCastle.Crypto;
using Org.BouncyCastle.Crypto.Engines;
using Org.BouncyCastle.Crypto.Generators;
using Org.BouncyCastle.Crypto.Modes;
using Org.BouncyCastle.Crypto.Paddings;
using Org.BouncyCastle.Crypto.Parameters;
using Org.BouncyCastle.Security;
using Org.BouncyCastle.Utilities.Encoders;
using Ionic.Zip;


namespace ConsoleApplication1
{
    class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("start");

            // 暗号化
            //PaddedBufferedBlockCipher aes = new PaddedBufferedBlockCipher (new CbcBlockCipher(new AesEngine()));
            /*

            string inputString = "fdsdfkpofjsfcpefr-32rei32d23ki2dd";
            byte[] inputBytes = ASCIIEncoding.UTF8.GetBytes(inputString);

            string keyString = "ThisShouldBecomeA32ByteSecretKey"; // 16文字以上
            byte[] keyBytes = ASCIIEncoding.UTF8.GetBytes(keyString);

            IBufferedCipher cipher = CipherUtilities.GetCipher("AES/CTR/NoPadding");

            cipher.Init(true, new ParametersWithIV(ParameterUtilities.CreateKeyParameter("AES", keyBytes), new byte[16]));

            byte[] encryptedBytes = cipher.DoFinal(inputBytes);

            string base64EncryptedOutputString = Convert.ToBase64String(encryptedBytes);


            Console.WriteLine(base64EncryptedOutputString);
            // 複合化
            */



            //Demo params
            string keyString = "jDxESdRrcYKmSZi7IOW4lw==";

            string input = "Mi+su6ishi";
            byte[] inputBytes = Encoding.UTF8.GetBytes(input);
            byte[] iv = new byte[16]; //for the sake of demo

            //Set up
            AesEngine engine = new AesEngine();
            CbcBlockCipher blockCipher = new CbcBlockCipher(engine); //CBC
            PaddedBufferedBlockCipher cipher = new PaddedBufferedBlockCipher(blockCipher); //Default scheme is PKCS5/PKCS7
            KeyParameter keyParam = new KeyParameter(Convert.FromBase64String(keyString));
            ParametersWithIV keyParamWithIV = new ParametersWithIV(keyParam, iv, 0, 16);

            // Encrypt
            cipher.Init(true, keyParamWithIV);
            byte[] outputBytes = new byte[cipher.GetOutputSize(inputBytes.Length)];
            int length = cipher.ProcessBytes(inputBytes, outputBytes, 0);
            cipher.DoFinal(outputBytes, length); //Do the final block
            string encryptedInput = Convert.ToBase64String(outputBytes);

            Console.WriteLine("Encrypted string: {0}", encryptedInput);

            //Decrypt            
            cipher.Init(false, keyParamWithIV);
            byte[] comparisonBytes = new byte[cipher.GetOutputSize(outputBytes.Length)];
            length = cipher.ProcessBytes(outputBytes, comparisonBytes, 0);
            cipher.DoFinal(comparisonBytes, length); //Do the final block

            Console.WriteLine("Decrypted string: {0}", Encoding.UTF8.GetString(comparisonBytes)); //Should be abc

            using (ZipFile zip = new ZipFile())
            {
                zip.ProvisionalAlternateEncoding = System.Text.Encoding.GetEncoding("shift_jis");
                zip.CompressionLevel = Ionic.Zlib.CompressionLevel.BestCompression;
                //zip.Encryption = Ionic.Zip.EncryptionAlgorithm.WinZipAes256;
                //zip.Password = "password";

                var memStream = new MemoryStream();
                var streamWriter = new StreamWriter(memStream);

                streamWriter.Write("aaaa,1111,dddd,22222");
                streamWriter.Flush();

                var ms = new MemoryStream();
                ms.Seek(0, SeekOrigin.Begin);
                ms.Flush();

                ZipEntry e = zip.AddEntry("tagi.txt", memStream);
                //e.Password = "password";
                //e.Encryption = EncryptionAlgorithm.WinZipAes256;

                MemoryStream msZip = new MemoryStream();

                zip.Save(msZip);
                zip.Dispose();

                msZip.Seek(0, SeekOrigin.Begin);

                System.IO.File.WriteAllBytes(@"C:\\temp\\abc.zip", msZip.ToArray());
                    

                Console.WriteLine("aaaa");

            }






            Console.WriteLine("end");
        }


    }
}
